basePath: /api/v1
definitions:
  models.UserCreate:
    properties:
      email:
        type: string
      id:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.UserLogin:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.UserSwagger:
    properties:
      email:
        type: string
      id:
        type: string
      password:
        type: string
      refresh_token:
        type: string
      username:
        type: string
      videos:
        items:
          $ref: '#/definitions/models.VideoSwagger'
        type: array
    type: object
  models.VideoSwagger:
    properties:
      description:
        type: string
      id:
        type: string
      title:
        type: string
      user_id:
        type: string
      video:
        type: string
    type: object
host: localhost:3003
info:
  contact: {}
  description: A streaming service API using Go and Gin framework, with Swagger documentation
    and ffmpeg integration.
  title: Go Streaming Service API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: User object containing all user details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserSwagger'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Log in user
      tags:
      - Auth
  /streaming/:
    get:
      description: Upload a video file along with metadata (title and description)
        and save it to the AWS bucket.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.VideoSwagger'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Save a video
      tags:
      - streaming
  /streaming/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload a video file along with metadata (title and description)
        and save to the AWS bucket.
      parameters:
      - description: Video Title
        in: formData
        name: title
        required: true
        type: string
      - description: Video Description
        in: formData
        name: description
        type: string
      - description: Video File
        in: formData
        name: video
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.VideoSwagger'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Save a video
      tags:
      - streaming
  /users/:
    post:
      consumes:
      - application/json
      description: Save user in Db
      parameters:
      - description: User object containing all user details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserSwagger'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new user
      tags:
      - users
  /users/{UserId}:
    delete:
      description: Delete user by ID ni Db
      parameters:
      - description: User ID
        in: path
        name: Id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserSwagger'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete user by ID
      tags:
      - users
  /users/id/{UserId}:
    get:
      description: Search user by ID in Db
      parameters:
      - description: User ID
        in: path
        name: Id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserSwagger'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user by ID
      tags:
      - users
  /users/username/{userName}:
    get:
      description: Search user by userName in Db
      parameters:
      - description: User Name
        in: path
        name: userName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserSwagger'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user by userName
      tags:
      - users
swagger: "2.0"
